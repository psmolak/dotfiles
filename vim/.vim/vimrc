"  _
" |_)|    _ o._  _
" |  ||_|(_||| |_>
"         _|

if empty(glob("~/.vim/autoload/plug.vim"))
  execute '!mkdir ~/.vim/tmp'
  execute '!mkdir ~/.vim/autoload && wget -O ~/.vim/autoload/plug.vim https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


call plug#begin('~/.vim/plugged')

  " Editing
  Plug 'tpope/vim-rsi'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-unimpaired'
  Plug 'tpope/vim-commentary'
  Plug 'Raimondi/delimitMate'
    let delimitMate_expand_cr = 1
    let delimitMate_expand_space = 1
    let delimitMate_insert_eol_marker = 0
    let delimitMate_eol_marker = ';'
    let delimitMate_jump_expansion = 1
    let delimitMate_balance_matchpairs = 1

  Plug 'junegunn/vim-easy-align'
    xmap ga <Plug>(EasyAlign)
    nmap ga <Plug>(EasyAlign)

  " Syntax
  Plug 'jacoborus/tender.vim'
  Plug 'sheerun/vim-polyglot'
  Plug 'adelarsq/vim-matchit'
  Plug 'rgrinberg/vim-ocaml'
  Plug 'vim-scripts/vylight'
  Plug 'tiehuis/0x4545-256.vim'
  Plug 'kadekillary/skull-vim'

  " Interface
  Plug 'itchyny/lightline.vim'
    let g:lightline = { 'colorscheme': 'tenderplus' }

  Plug 'majutsushi/tagbar'
  Plug 'ap/vim-buftabline'
  Plug 'scrooloose/nerdtree'
    let g:NERDTreeShowHidden = 1
    let g:NERDTreeQuitOnOpen = 1
    let g:NERDTreeMinimalUI = 1
    let g:NERDTreeCascadeOpenSingleChildDir = 1

  Plug 'ntpeters/vim-better-whitespace'
    hi! link ExtraWhitespace Error
  Plug 'yuttie/comfortable-motion.vim'
    let g:comfortable_motion_no_default_key_mappings = 1
    let g:comfortable_motion_impulse_multiplier = 1
    nnoremap <silent> <C-d> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * 2)<CR>
    nnoremap <silent> <C-u> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * -2)<CR>
    nnoremap <silent> <C-f> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * 4)<CR>
    nnoremap <silent> <C-b> :call comfortable_motion#flick(g:comfortable_motion_impulse_multiplier * winheight(0) * -4)<CR>

call plug#end()

set rtp^="/home/ricer/.opam/ocaml-base-compiler.4.07.0/share/ocp-indent/vim"

"  __
" /__ _ ._  _ .__.|
" \_|(/_| |(/_|(_||
"

colorscheme tender
" temporary fix for gutter column
hi SignColumn guifg=#282828 ctermfg=235 guibg=#282828 ctermbg=235 gui=NONE cterm=NONE

set autoindent                            " Indent according to previous line
set backspace=indent,eol,start            " Make backspace work as expected
set hidden                                " Allow to switch unsaved buffers
set ignorecase                            " Do case insesitive searching
set smartcase                             " Do case sensitive searching if pattern cosists of any uppercase letters
set wrapscan                              " Searches wrap around EOF
set report=0                              " Always report number of changed lines
set ttyfast                               " Enable faster terminal redrawing
set lazyredraw                            " Enable faster rendering when doing macros
set splitbelow                            " Open new split below the currently focused
set splitright                            " Open new split on the right side of currently focused
set clipboard^=unnamedplus                " Forward unnamed register to X11 clipboard
set autoread                              " Automatically re-read file if changed outside Vim
set laststatus=2                          " Always show statusline
set display=lastline                      " Display as much line as possible with @@@ at the end
set showbreak=↪                           " Display '↪' at the beginnig of wrapped line
set nowrap                                " Disable line wrapping
set showcmd                               " Show partially typed key-chord on statusline
set incsearch                             " Highligh while searching
set hlsearch                              " Highlight matched words
set termguicolors                         " Enable True Colors support
set t_8b=[48;2;%lu;%lu;%lum             " Magic to make tc work inside tmux
set t_8f=[38;2;%lu;%lu;%lum
set nocursorline                          " Disable line highlighting
set number                                " Enable number line
set relativenumber                        " Enable relative number line
set scrolloff=2                           " Keep some context around cursor
set wildmenu                              " Show completion menu
set nolist                                " Show special characters
set listchars=tab:▸\ ,eol:¬
set listchars+=extends:❯
set listchars+=precedes:❮
set directory=$HOME/.vim/tmp              " Save swapfiles under custom directory
set updatecount=100                       " Update swap file after 100 characters
set undofile                              " Persistent undo history across vim restarts
set undodir=$HOME/.vim/tmp                " Set and save undo files under custom directory
set viminfo ='100,n$HOME/.vim/tmp/viminfo " Save viminfo files under custom directory

"
" |\/| _.._ ._ o._  _  _
" |  |(_||_)|_)|| |(_|_>
"        |  |       _|

let mapleader = " "
let maplocalleader = " "

" Better default mappings
cnoremap <c-n> <down>
cnoremap <c-p> <up>
nnoremap / /\v
nnoremap ? ?\v
nnoremap Y y$
noremap j gj
noremap k gk
noremap gj j
noremap gk k

" Disable highlighting after searching
nnoremap <c-l> :nohlsearch<cr>:diffupdate<cr>:syntax sync fromstart<cr><c-l>

" Switch to normal mode
inoremap <c-l> <esc>
vnoremap <c-l> <esc>
cnoremap <c-l> <esc>

" Edit config at any time
nnoremap <leader>ev :e $MYVIMRC<cr>
nnoremap <leader>ei :e $HOME/.vim/impro.md<cr>

" Quit vim
nnoremap <leader>q :quit<cr>

" Toggle options
nnoremap <leader>tf :NERDTreeToggle<cr>
nnoremap <leader>tn :let [&nu, &rnu] = [!&rnu, &nu+&rnu==1]<cr>
nnoremap <leader>tw :set wrap!<cr>
nnoremap <leader>ths :if exists("g:syntax_on") <bar> syntax off <bar> else <bar> syntax enable <bar> endif<cr>
nnoremap <leader>thw :ToggleWhitespace<cr>
nnoremap <leader>thl :set cursorline!<cr>
nnoremap <leader>thc :set cursorcolumn!<cr>

" Work with buffers
nnoremap <leader>bw :write<cr>
nnoremap <leader>bd :bdelete<cr>
nnoremap <leader>bn :bnext<cr>
nnoremap <leader>bp :bprev<cr>

" Work with plugins
nnoremap <leader>pi :PlugInstall<cr>
nnoremap <leader>pu :PlugUpdate<cr>
nnoremap <leader>pc :PlugClean<cr>
nnoremap <leader>ps :PlugStatus<cr>

"
"  /\   _|_ _  _ _ ._ _ ._ _  _.._  _| _
" /--\|_||_(_)(_(_)| | || | |(_|| |(_|_>
"

" source vimrc after saving it
augroup reload_vimrc
    autocmd!
    autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END

" restore cursor position
augroup restore_cursor
  autocmd!
  autocmd BufReadPost * call setpos(".", getpos("'\""))
augroup END
